esphome:
  name: displaysala
  platform: ESP32
  board: az-delivery-devkit-v4
  on_boot:
    then:
    - output.set_level:
        id: gpio_33
        level: 0%
    - display.page.show: pageInicializando

# Enable logging
logger:

ota:
  password: !secret displaysala_ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  use_address: displaysala.lan


spi:
  clk_pin: 18
  mosi_pin: 23
  miso_pin: 19

color:
  - id: colorOFF
    red: 80%
    green: 78%
    blue: 100%
  
  - id: colorON
    red: 100%
    green: 100%
    blue: 100%

  - id: colorFondo
    red: 25%
    green: 20%
    blue: 100%
    
  - id: colorFondoError
    red: 100%
    green: 20%
    blue: 20%

    
font:
  - file: "fonts/Cosas.ttf"
    id: fontCosas
    size: 70
    glyphs: ["A", "B", "C", "D", "E"]

  # https://erikflowers.github.io/weather-icons/
  - file: "fonts/weathericons-regular-webfont.ttf"
    id: fontClima
    size: 50
    glyphs: [
      "", # (f00d) wi-day-sunny 
      "", # (f002) wi-day-cloudy 
      "", # (f005) wi-day-lightning 
      "", # (f009) wi-day-showers 
      "", # (f02e) wi-night-clear 
      "", # (f086) wi-night-alt-cloudy 
      "", # (f025) wi-night-alt-lightning 
      "", # (f029) wi-night-alt-showers 
      "", # (f01d) wi-storm-showers 
      "", # (f041) wi-cloud 
      "", # (f013) wi-cloudy 
      "", # (f019) wi-rain 
      "", # (f017) wi-rain-mix A
      "", # (f018) wi-rain-wind 
      "", # (f0b5) wi-sleet 
      "", # (f01b) wi-snow 
      "", # (f01c) wi-sprinkle 
      "", # (f01e) wi-thunderstorm 
      "", # (f062) wi-smoke 
      "", # (f016) wi-lightning 
      "", # (f063) wi-dust 
      "", # (f056) wi-tornado 
      "", # (f07b) wi-na 
      ""  # (f087) wi-direction-up-left
    ]


  - file: "fonts/Orbitron-VariableFont_wght.ttf"
    id: fontTemperaturaMedia
    size: 30

  - file: "fonts/Orbitron-VariableFont_wght.ttf"
    id: fontTemperatura
    size: 70
    glyphs: ["-", "%", ".", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]
  
  - file: "fonts/Orbitron-VariableFont_wght.ttf"
    id: fontTemperaturaPequena
    size: 20
    glyphs: ["-", "%", ".", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]


globals:
  - id: globalCurrentTemperature
    type: float

  - id: globalCurrentHumidity
    type: int

  - id: globalTargetTemperature
    type: float

  - id: globalCaldera
    type: bool

  - id: globalModo
    type: bool

  - id: globalClimaCurrentTemperature
    type: float

  - id: globalClimaCurrentHumidity
    type: int

  - id: globalClimaConditionId
    type: int

  - id: globaltouch_key1Estado
    type: int

  - id: globaltouch_key2Estado
    type: int

  - id: globaltouch_key3Estado
    type: int
    
  - id: globalEscenaNinosAcostados
    type: bool

  - id: globalTermometrosKO
    type: bool

mqtt:
  broker: !secret mqtt_broker
  client_id: displaysala
  log_topic: casa/displaysala/log
  birth_message:
    topic: casa/displaysala/status
    payload: 'ON'
  will_message:
    topic: casa/displaysala/status
    payload: 'OFF'
  on_json_message:
    topic: casa/displaysala/state
    then:
      - display.page.show: pageDefault
      - lambda: |-
          if (x.containsKey("currentTemperature"))
            id(globalCurrentTemperature) = x["currentTemperature"];
          else
            id(globalCurrentTemperature) = 0.0;
            
          if (x.containsKey("currentHumidity"))
            id(globalCurrentHumidity) = x["currentHumidity"];
          else
            id(globalCurrentHumidity) = 0;

          if (x.containsKey("targetTemperature"))
            id(globalTargetTemperature) = x["targetTemperature"];
          else
            id(globalTargetTemperature) = 0;

          if (x.containsKey("caldera"))
            id(globalCaldera) = x["caldera"];
          else
            id(globalCaldera) = false;

          if (x.containsKey("modo"))
            id(globalModo) = x["modo"];
          else
            id(globalModo) = false;

          if (x.containsKey("climaCurrentTemperature"))
            id(globalClimaCurrentTemperature) = x["climaCurrentTemperature"];
          else
            id(globalClimaCurrentTemperature) = 0.0;
            
          if (x.containsKey("climaCurrentHumidity"))
            id(globalClimaCurrentHumidity) = x["climaCurrentHumidity"];
          else
            id(globalClimaCurrentHumidity) = 0;

          if (x.containsKey("climaConditionId"))
            id(globalClimaConditionId) = x["climaConditionId"];
          else
            id(globalClimaConditionId) = 0;

          if (x.containsKey("escenaNinosAcostados"))
            id(globalEscenaNinosAcostados) = x["escenaNinosAcostados"];
          else
            id(globalEscenaNinosAcostados) = false;

          if (x.containsKey("termometrosKO"))
            id(globalTermometrosKO) = x["termometrosKO"];
          else
            id(globalTermometrosKO) = false;

          
          float brillo = 1.0;  
          if (x.containsKey("brillo")) {
            brillo =  100;
          }


          id(gpio_33).set_level(brillo);


output:
  - platform: ledc
    pin: GPIO33
    id: gpio_33

display:
  - platform: ili9341
    model: TFT 2.4
    cs_pin: 5
    dc_pin: 26
    led_pin: 33  ### see note below ###
    reset_pin: 27
    rotation: 270
    pages:
      - id: pageInicializando
        lambda: |-
          it.fill(Color::BLACK);
          it.printf(160, 120, id(fontTemperaturaMedia), TextAlign::CENTER, "Inicializando...");
          // Lo enciendo ahora para que no se vea nada más al empezar
          id(gpio_33).set_level(1);

      - id: pageDefault
        lambda: |-
          // Limpiar

          if(id(globalTermometrosKO))  {
            it.fill(id(colorFondoError));
          } else {
            it.fill(id(colorFondo));
          }
 
          // Temperatura Casa
          int parteEntera = round(id(globalCurrentTemperature)*10);
          int parteDecimal = abs(parteEntera % 10);
          parteEntera /= 10;
          

          std::string parteEnteraStr;
          std::string parteDecimalStr;

          parteEnteraStr =  to_string(parteEntera) + ".";
          parteDecimalStr = to_string(parteDecimal); 
          

          int parteEnteraStrWidth, parteEnteraStrXOffset, parteEnteraStrBaseline, parteEnteraStrHeight;
          int parteDecimalStrWidth, parteDecimalStrXOffset, parteDecimalStrBaseline, parteDecimalStrHeight;
          
          id(fontTemperatura).measure(parteEnteraStr.c_str(), &parteEnteraStrWidth, &parteEnteraStrXOffset, &parteEnteraStrBaseline, &parteEnteraStrHeight);
          id(fontTemperaturaMedia).measure(parteDecimalStr.c_str(), &parteDecimalStrWidth, &parteEnteraStrXOffset, &parteDecimalStrBaseline, &parteDecimalStrHeight);
          
          int parteEnteraStrPosX = 160 - (parteEnteraStrWidth + parteDecimalStrWidth) / 2;
          int parteEnteraStrPosY = 20;
          int parteDecimalStrPosX = parteEnteraStrPosX + parteEnteraStrWidth;
          int parteDecimalStrPosY = parteEnteraStrPosY + (parteEnteraStrBaseline - parteDecimalStrBaseline);

          it.print(parteEnteraStrPosX, parteEnteraStrPosY, id(fontTemperatura), parteEnteraStr.c_str());
          it.print(parteDecimalStrPosX, parteDecimalStrPosY, id(fontTemperaturaMedia), parteDecimalStr.c_str());
          // it.rectangle(parteEnteraStrPosX, parteEnteraStrPosY, parteEnteraStrWidth, parteEnteraStrHeight);
          // it.rectangle(parteDecimalStrPosX, parteDecimalStrPosY, parteDecimalStrWidth, parteDecimalStrHeight);
          
          
          it.printf(160, 90, id(fontTemperaturaMedia), TextAlign::TOP_CENTER, "%i%%", id(globalCurrentHumidity));

          
          // Temperatura Durango
          parteEntera = round(id(globalClimaCurrentTemperature)*10);
          parteDecimal = abs(parteEntera % 10);
          parteEntera /= 10;
          
          parteEnteraStr =  to_string(parteEntera) + ".";
          parteDecimalStr = to_string(parteDecimal); 
          
          id(fontTemperaturaMedia).measure(parteEnteraStr.c_str(), &parteEnteraStrWidth, &parteEnteraStrXOffset, &parteEnteraStrBaseline, &parteEnteraStrHeight);
          id(fontTemperaturaPequena).measure(parteDecimalStr.c_str(), &parteDecimalStrWidth, &parteEnteraStrXOffset, &parteDecimalStrBaseline, &parteDecimalStrHeight);
          
          parteEnteraStrPosX = 40 - (parteEnteraStrWidth + parteDecimalStrWidth) / 2;
          parteEnteraStrPosY = 70;
          parteDecimalStrPosX = parteEnteraStrPosX + parteEnteraStrWidth;
          parteDecimalStrPosY = parteEnteraStrPosY + (parteEnteraStrBaseline - parteDecimalStrBaseline);

          it.print(parteEnteraStrPosX, parteEnteraStrPosY, id(fontTemperaturaMedia), parteEnteraStr.c_str());
          it.print(parteDecimalStrPosX, parteDecimalStrPosY, id(fontTemperaturaPequena), parteDecimalStr.c_str());
          // it.rectangle(parteEnteraStrPosX, parteEnteraStrPosY, parteEnteraStrWidth, parteEnteraStrHeight);
          // it.rectangle(parteDecimalStrPosX, parteDecimalStrPosY, parteDecimalStrWidth, parteDecimalStrHeight);

          it.printf(40, 105, id(fontTemperaturaPequena), TextAlign::TOP_CENTER, "%i%%", id(globalClimaCurrentHumidity));
          
          std::string icono = "";

          switch(id(globalClimaConditionId)) { 
            case 200: // thunderstorm with light rain
            case 230: // thunderstorm with light drizzle
            case 231: // thunderstorm with drizzle
              icono = ""; // f01d
              break;
              
            case 201: // thunderstorm with rain
            case 202: // thunderstorm with heavy rain
            case 232: // thunderstorm with heavy drizzle
              icono = ""; // f01e
              break;
            
            
            case 210: // light thunderstorm
            case 211: // thunderstorm
            case 212: // heavy thunderstorm
              icono = ""; // f016
              break;

            case 221: // ragged thunderstorm
              if(true) {
                icono = ""; // f005
              } else {
                icono = ""; // f025
              }
              break;
            
            case 300: // light intensity drizzle
            case 301: // drizzle
            case 302: // heavy intensity drizzle
            case 310: // light intensity drizzle rain
            case 311: // drizzle rain
              icono = ""; // f01c
              break;
            
            case 312: // heavy intensity drizzle rain
            case 313: // shower rain and drizzle
            case 314: // heavy shower rain and drizzle
            case 321: // shower drizzle
            case 500: // light rain
            case 501: // moderate rain
            case 502: // heavy intensity rain
            case 503: // very heavy rain
            case 504: // extreme rain
            case 511: // freezing rain
            case 520: // light intensity shower rain
            case 521: // shower rain
            case 522: // heavy intensity shower rain
              icono = ""; // f019
              break;
            
            
            case 531: // ragged shower rain
              if(true) {
                icono = ""; // f009
              } else {
                icono = ""; // f029
              }
              break;

            case 611: // Sleet
            case 612: // Light shower sleet
            case 613: // Shower sleet
              icono = ""; // f0b5
              break;

            case 615: // Light rain and snow
            case 616: // Rain and snow
              icono = ""; // f017
              break;


            case 600: // light snow
            case 601: // Snow
            case 602: // Heavy snow
            case 620: // Light shower snow
            case 621: // Shower snow
            case 622: // Heavy shower snow
              icono = ""; // f01b
              break;

            case 701: // mist
            case 721: // Haze
            case 731: // sand/ dust whirls
            case 741: // fog
            case 751: // Sand
            case 761: // dust
            case 762: // volcanic ash
              icono = ""; // f063
              break;
             
            case 711: // Smoke
              icono = ""; // f062
              break;

            case 771: // squalls
              icono = ""; // f018
              break;

            case 781: // tornado
              icono = ""; // f056
              break;

            case 800: // clear sky
              if(true) {
                icono = ""; // f00d
              } else {
                icono = ""; // f02e
              }
              break;
              
            case 801: // few clouds: 11-25%
            case 802: // scattered clouds: 25-50%
              if(true) {
                icono = ""; // f002
              } else {
                icono = ""; // f086
              }
              break;

            case 803: // broken clouds: 51-84%
              icono = ""; // f041
              break;

            case 804: // overcast clouds: 85-100%
              icono = ""; // f013
              break;

            
            default:
              icono = ""; // f07b
              break;
          };
          
          it.print(45, 40, id(fontClima), TextAlign::CENTER , icono.c_str());
          
          if(!id(globalModo)) {
            // Calefaccion apagada
            icono = "C";
          } else {
            // Calefaccion encendia
            icono = "C";
            
            std::string iconoCaldera = "";

          
            if (id(globalCaldera)) {
              // Caldera encendida
              iconoCaldera = "B";
            } else {
              // Caldera apagada
              iconoCaldera = "A";
            }
            
            it.print(275, 40, id(fontCosas), TextAlign::CENTER , iconoCaldera.c_str());

            // Temperatura Objetivo
            parteEntera = round(id(globalTargetTemperature)*10);
            parteDecimal = abs(parteEntera % 10);
            parteEntera /= 10;
            
            parteEnteraStr =  to_string(parteEntera) + ".";
            parteDecimalStr = to_string(parteDecimal); 
            
            id(fontTemperaturaMedia).measure(parteEnteraStr.c_str(), &parteEnteraStrWidth, &parteEnteraStrXOffset, &parteEnteraStrBaseline, &parteEnteraStrHeight);
            id(fontTemperaturaPequena).measure(parteDecimalStr.c_str(), &parteDecimalStrWidth, &parteEnteraStrXOffset, &parteDecimalStrBaseline, &parteDecimalStrHeight);
            
            parteEnteraStrPosX = 280 - (parteEnteraStrWidth + parteDecimalStrWidth) / 2;
            parteEnteraStrPosY = 70;
            parteDecimalStrPosX = parteEnteraStrPosX + parteEnteraStrWidth;
            parteDecimalStrPosY = parteEnteraStrPosY + (parteEnteraStrBaseline - parteDecimalStrBaseline);
  
            it.print(parteEnteraStrPosX, parteEnteraStrPosY, id(fontTemperaturaMedia), parteEnteraStr.c_str());
            it.print(parteDecimalStrPosX, parteDecimalStrPosY, id(fontTemperaturaPequena), parteDecimalStr.c_str());
            // it.rectangle(parteEnteraStrPosX, parteEnteraStrPosY, parteEnteraStrWidth, parteEnteraStrHeight);
            // it.rectangle(parteDecimalStrPosX, parteDecimalStrPosY, parteDecimalStrWidth, parteDecimalStrHeight);
          }
          
          /* if(id(globaltouch_key1Estado) && 2 == 2) 
            it.filled_rectangle(20, 160, 80, 60);
          else
            it.rectangle(20, 160, 80, 60);
          
          if(id(touch_key2).state) 
            it.filled_rectangle(120, 160, 80, 60);
          else
            it.rectangle(120, 160, 80, 60);

          if(id(touch_key3).state) 
            it.filled_rectangle(220, 160, 80, 60);
          else
            it.rectangle(220, 160, 80, 60); */



          it.print(60, 190, id(fontCosas), id(globalEscenaNinosAcostados) ? id(colorON) : id(colorOFF), TextAlign::CENTER , "D");
          it.print(160, 190, id(fontCosas), TextAlign::CENTER , "E");
          it.print(260, 190, id(fontCosas), id(globalModo) ? id(colorON) : id(colorOFF), TextAlign::CENTER , icono.c_str());



          


touchscreen:
  platform: xpt2046
  id: MyTouchscreen
  cs_pin: 32
  interrupt_pin: 4
  update_interval: 50ms
  report_interval: never
  threshold: 400
  calibration_x_min: 3920
  calibration_x_max: 465
  calibration_y_min: 3740
  calibration_y_max: 280
  swap_x_y: false
  on_touch:
    - lambda: |-
          ESP_LOGI("cal", "x=%d, y=%d, x_raw=%d, y_raw=%0d",
              id(MyTouchscreen).x,
              id(MyTouchscreen).y,
              id(MyTouchscreen).x_raw,
              id(MyTouchscreen).y_raw
              );

binary_sensor:
  - platform: touchscreen
    touchscreen_id: MyTouchscreen
    id: touch_key1
    x_min: 35
    x_max: 105
    y_min: 170
    y_max: 240
    on_press:
      then:
        - mqtt.publish:
            topic:  casa/displaysala/touch1
            payload: "ON"
           
    on_release:
      then:
        - mqtt.publish:
            topic:  casa/displaysala/touch1
            payload: "OFF"
        
  - platform: touchscreen
    touchscreen_id: MyTouchscreen
    id: touch_key2
    x_min: 130
    x_max: 210
    y_min: 170
    y_max: 240
    on_press:
      then:
        - mqtt.publish:
            topic:  casa/displaysala/touch2
            payload: "ON"
            
    on_release:
      then:
        - mqtt.publish:
            topic:  casa/displaysala/touch2
            payload: "OFF"
   
  - platform: touchscreen
    touchscreen_id: MyTouchscreen
    id: touch_key3
    x_min: 240
    x_max: 310
    y_min: 170
    y_max: 240
    on_press:
      then:
        - mqtt.publish:
            topic:  casa/displaysala/touch3
            payload: "ON"
           
    on_release:
      then:
        - mqtt.publish:
            topic:  casa/displaysala/touch3
            payload: "OFF"


